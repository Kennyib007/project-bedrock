---
# Catalog ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: catalog
  labels:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/component: service
---
# Catalog Secret (credentials from Terraform)
apiVersion: v1
kind: Secret
metadata:
  name: catalog-db
data:
  RETAIL_CATALOG_PERSISTENCE_USER: "Y2F0YWxvZ19hZG1pbg==" # catalog_admin (base64)
  RETAIL_CATALOG_PERSISTENCE_PASSWORD: "ckIlYlVHWi4xYWlKTUtCSnhfRks=" # your base64 password
---
# Catalog ConfigMap (uses RDS MySQL)
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalog
data:
  RETAIL_CATALOG_PERSISTENCE_PROVIDER: mysql
  RETAIL_CATALOG_PERSISTENCE_ENDPOINT: project-bedrock-catalog-db.c4fgiqikeaa8.us-east-1.rds.amazonaws.com:3306
  RETAIL_CATALOG_PERSISTENCE_DB_NAME: catalog
---
# Catalog Service
apiVersion: v1
kind: Service
metadata:
  name: catalog
  labels:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/component: service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/component: service
---
# Catalog Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog
  labels:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/component: service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog
      app.kubernetes.io/component: service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalog
        app.kubernetes.io/component: service
    spec:
      serviceAccountName: catalog
      containers:
        - name: catalog
          image: "public.ecr.aws/aws-containers/retail-store-sample-catalog:1.2.4"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: catalog
            - secretRef:
                name: catalog-db
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          resources:
            requests:
              cpu: 256m
              memory: 256Mi
            limits:
              memory: 256Mi
---
# Carts ServiceAccount (with IRSA)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: carts
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::160885273554:role/project-bedrock-carts-irsa
  labels:
    app.kubernetes.io/name: carts
    app.kubernetes.io/component: service
---
# Carts ConfigMap (uses DynamoDB table)
apiVersion: v1
kind: ConfigMap
metadata:
  name: carts
data:
  RETAIL_CART_PERSISTENCE_PROVIDER: dynamodb
  RETAIL_CART_PERSISTENCE_DYNAMODB_TABLE_NAME: project-bedrock-carts
  RETAIL_CART_PERSISTENCE_DYNAMODB_CREATE_TABLE: "false"
---
# Carts Service
apiVersion: v1
kind: Service
metadata:
  name: carts
  labels:
    app.kubernetes.io/name: carts
    app.kubernetes.io/component: service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: carts
    app.kubernetes.io/component: service
---
# Carts Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels:
    app.kubernetes.io/name: carts
    app.kubernetes.io/component: service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: carts
      app.kubernetes.io/component: service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: carts
        app.kubernetes.io/component: service
    spec:
      serviceAccountName: carts
      containers:
        - name: carts
          image: "public.ecr.aws/aws-containers/retail-store-sample-cart:1.2.4"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: carts
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
          resources:
            requests:
              cpu: 256m
              memory: 512Mi
            limits:
              memory: 512Mi
---
# Orders ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orders
  labels:
    app.kubernetes.io/name: orders
    app.kubernetes.io/component: service
---
# Orders Secret (credentials from Terraform)
apiVersion: v1
kind: Secret
metadata:
  name: orders-db
data:
  RETAIL_ORDERS_PERSISTENCE_USERNAME: "b3JkZXJzX2FkbWlu" # orders_admin (base64)
  RETAIL_ORDERS_PERSISTENCE_PASSWORD: "ckIlYlVHWi4xYWlKTUtCSnhfRks=" # your base64 password
---
# Orders ConfigMap (uses RDS Postgres)
apiVersion: v1
kind: ConfigMap
metadata:
  name: orders
data:
  RETAIL_ORDERS_MESSAGING_PROVIDER: rabbitmq
  RETAIL_ORDERS_MESSAGING_RABBITMQ_ADDRESSES: orders-rabbitmq:5672
  RETAIL_ORDERS_PERSISTENCE_PROVIDER: postgres
  RETAIL_ORDERS_PERSISTENCE_ENDPOINT: project-bedrock-orders-db.c4fgiqikeaa8.us-east-1.rds.amazonaws.com:5432
  RETAIL_ORDERS_PERSISTENCE_NAME: orders
---
# Orders Service
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    app.kubernetes.io/name: orders
    app.kubernetes.io/component: service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: orders
    app.kubernetes.io/component: service
---
# Orders Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    app.kubernetes.io/name: orders
    app.kubernetes.io/component: service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/component: service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/component: service
    spec:
      serviceAccountName: orders
      containers:
        - name: orders
          image: "public.ecr.aws/aws-containers/retail-store-sample-orders:1.2.4"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: orders-db
            - configMapRef:
                name: orders
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
          resources:
            requests:
              cpu: 256m
              memory: 512Mi
            limits:
              memory: 512Mi
---
# Checkout ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: checkout
---
# Checkout ConfigMap (uses Redis + Orders svc)
apiVersion: v1
kind: ConfigMap
metadata:
  name: checkout
data:
  RETAIL_CHECKOUT_PERSISTENCE_PROVIDER: redis
  RETAIL_CHECKOUT_PERSISTENCE_REDIS_URL: redis://checkout-redis:6379
  RETAIL_CHECKOUT_ENDPOINTS_ORDERS: http://orders:80
---
# Checkout Service
apiVersion: v1
kind: Service
metadata:
  name: checkout
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: checkout
    app.kubernetes.io/component: service
---
# Checkout Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: checkout
      app.kubernetes.io/component: service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: checkout
        app.kubernetes.io/component: service
    spec:
      serviceAccountName: checkout
      containers:
        - name: checkout
          image: "public.ecr.aws/aws-containers/retail-store-sample-checkout:1.2.4"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: checkout
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
---
# UI ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ui
---
# UI ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: ui
data:
  RETAIL_UI_ENDPOINTS_CATALOG: http://catalog
  RETAIL_UI_ENDPOINTS_CARTS: http://carts
  RETAIL_UI_ENDPOINTS_CHECKOUT: http://checkout
  RETAIL_UI_ENDPOINTS_ORDERS: http://orders
---
# UI Service (LoadBalancer)
apiVersion: v1
kind: Service
metadata:
  name: ui
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: ui
    app.kubernetes.io/component: service
---
# UI Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ui
      app.kubernetes.io/component: service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ui
        app.kubernetes.io/component: service
    spec:
      serviceAccountName: ui
      containers:
        - name: ui
          image: "public.ecr.aws/aws-containers/retail-store-sample-ui:1.2.4"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: ui
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
